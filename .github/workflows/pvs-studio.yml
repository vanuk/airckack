name: PVS-Studio Analysis

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  push:
    branches: [ master ]
    paths-ignore:
      - apparmor/**
      - contrib/**
      - manpages/**
      - patches/**
      - '.devcontainer/**'
      - '.coverityignore'
      - '.github/workflows/gentoo.yml'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/workflows/almalinux.yml'
      - '.github/workflows/alpine.yml'
      - '.github/workflows/check-actions-updates.yml'
      - '.github/workflows/check-release-ready.yml'
      - '.github/workflows/coverity.yml'
      - '.github/workflows/devcontainer.yml'
      - '.github/workflows/docker.yml'
      - '.github/workflows/docker-release.yml'
      - '.github/workflows/dragonflybsd.yml'
      - '.github/workflows/freebsd.yml'
      - '.github/workflows/gcc.yml'
      - '.github/workflows/irc.yml'
      - '.github/workflows/kali.yml'
      - '.github/workflows/linux.yml'
      - '.github/workflows/linux-pcre.yml'
      - '.github/workflows/macos.yml'
      - '.github/workflows/manual.yml'
      - '.github/workflows/markdown-link.yml'
      - '.github/workflows/netbsd.yml'
      - '.github/workflows/openbsd.yml'
      - '.github/workflows/windows.yml'
      - '.vscode/**'
      - '.codespellrc'
      - '.gitignore'
      - '.pre-commit-config.yaml'
      - 'AC_VERSION.in'
      - 'AUTHORS'
      - 'centos_autotools.sh'
      - 'ChangeLog'
      - 'docker_package_install.sh'
      - 'Dockerfile'
      - 'Dockerfile.release'
      - 'INSTALLING'
      - 'LICENSE'
      - 'LICENSE.OpenSSL'
      - 'README'
      - 'README.md'
      - 'SECURITY.md'
      - 'scripts/airmon-ng.*'

  pull_request:
    branches: [ master ]
    paths-ignore:
      - apparmor/**
      - contrib/**
      - manpages/**
      - patches/**
      - '.devcontainer/**'
      - '.coverityignore'
      - '.github/workflows/gentoo.yml'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/workflows/almalinux.yml'
      - '.github/workflows/alpine.yml'
      - '.github/workflows/check-actions-updates.yml'
      - '.github/workflows/check-release-ready.yml'
      - '.github/workflows/coverity.yml'
      - '.github/workflows/devcontainer.yml'
      - '.github/workflows/docker.yml'
      - '.github/workflows/docker-release.yml'
      - '.github/workflows/dragonflybsd.yml'
      - '.github/workflows/freebsd.yml'
      - '.github/workflows/gcc.yml'
      - '.github/workflows/irc.yml'
      - '.github/workflows/kali.yml'
      - '.github/workflows/linux.yml'
      - '.github/workflows/linux-pcre.yml'
      - '.github/workflows/macos.yml'
      - '.github/workflows/manual.yml'
      - '.github/workflows/markdown-link.yml'
      - '.github/workflows/netbsd.yml'
      - '.github/workflows/openbsd.yml'
      - '.github/workflows/windows.yml'
      - '.vscode/**'
      - '.codespellrc'
      - '.gitignore'
      - '.pre-commit-config.yaml'
      - 'AC_VERSION.in'
      - 'AUTHORS'
      - 'centos_autotools.sh'
      - 'ChangeLog'
      - 'docker_package_install.sh'
      - 'Dockerfile'
      - 'Dockerfile.release'
      - 'INSTALLING'
      - 'LICENSE'
      - 'LICENSE.OpenSSL'
      - 'README'
      - 'README.md'
      - 'SECURITY.md'
      - 'scripts/airmon-ng.*'

env:
  LANG: en_US.UTF-8
  TZ: UTC

jobs:
  pvs_studio_analyzer:
    name: PVS-Studio Static Analyzer

    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4
        env:
          PVS_STUDIO_NAME: ${{ secrets.PvsStudioName }}
          PVS_STUDIO_KEY: ${{ secrets.PvsStudioKey }}
        if: ${{ env.PVS_STUDIO_NAME != null && env.PVS_STUDIO_KEY != null }}
        with:
          submodules: 'recursive'

      - name: Log and setup environment
        env:
          PVS_STUDIO_NAME: ${{ secrets.PvsStudioName }}
          PVS_STUDIO_KEY: ${{ secrets.PvsStudioKey }}
        if: ${{ env.PVS_STUDIO_NAME != null && env.PVS_STUDIO_KEY != null }}
        run: |
          mkdir -p pvs-package

      - name: Find latest PVS-Studio release
        env:
          PVS_STUDIO_NAME: ${{ secrets.PvsStudioName }}
          PVS_STUDIO_KEY: ${{ secrets.PvsStudioKey }}
        if: ${{ env.PVS_STUDIO_NAME != null && env.PVS_STUDIO_KEY != null }}
        id: pvs_version
        run: |
          p=$(curl -sRL "https://pvs-studio.com/en/pvs-studio/download-all/" |\
              grep -oE 'https?://cdn.pvs-studio.com/pvs-studio-[0-9.]+(-amd64\.deb)')
          echo "debfile=${p}" >> $GITHUB_OUTPUT

      - name: Fetch PVS-Studio package
        env:
          PVS_STUDIO_NAME: ${{ secrets.PvsStudioName }}
          PVS_STUDIO_KEY: ${{ secrets.PvsStudioKey }}
        if: ${{ env.PVS_STUDIO_NAME != null && env.PVS_STUDIO_KEY != null }}
        run: wget "${{ steps.pvs_version.outputs.debfile }}" -O "pvs-package/pvs.deb"

      - name: Install packages
        env:
          PVS_STUDIO_NAME: ${{ secrets.PvsStudioName }}
          PVS_STUDIO_KEY: ${{ secrets.PvsStudioKey }}
        if: ${{ env.PVS_STUDIO_NAME != null && env.PVS_STUDIO_KEY != null }}
        run: |
          set -xeu
          sudo apt update -yqq
          sudo apt-get -y --no-install-recommends install autoconf automake \
            build-essential ccache ethtool expect hostapd iw lcov           \
            libcmocka-dev libgcrypt20-dev libhwloc-dev libnl-3-dev          \
            libnl-genl-3-dev libpcap-dev libpcre2-dev libsqlite3-dev        \
            libssl-dev libtool pkg-config rfkill screen shtool strace       \
            tcpdump usbutils wpasupplicant zlib1g-dev
          sudo dpkg -i "pvs-package/pvs.deb"
          pvs-studio-analyzer credentials                                   \
            "${{ secrets.PvsStudioName }}" "${{ secrets.PvsStudioKey }}"

      - name: Build
        env:
          AM_COLOR_TESTS: always
          PVS_STUDIO_NAME: ${{ secrets.PvsStudioName }}
          PVS_STUDIO_KEY: ${{ secrets.PvsStudioKey }}
        if: ${{ env.PVS_STUDIO_NAME != null && env.PVS_STUDIO_KEY != null }}
        run: |
          set -eu
          CPUS=$(nproc)
          export CC="gcc"
          export CXX="g++"
          echo "::group::make distclean"
          make distclean || :
          echo "::endgroup::"
          echo "::group::autoreconf"
          autoreconf -vif
          echo "::endgroup::"
          echo "::group::configure"
          ./configure --without-opt       \
                      --with-experimental \
                      --enable-maintainer-mode || { cat config.log; exit 1; }
          echo "::endgroup::"
          echo "::group::build"
          pvs-studio-analyzer trace -- make -j ${CPUS}
          echo "::endgroup::"

      - name: Analyze
        env:
          PVS_STUDIO_NAME: ${{ secrets.PvsStudioName }}
          PVS_STUDIO_KEY: ${{ secrets.PvsStudioKey }}
        if: ${{ env.PVS_STUDIO_NAME != null && env.PVS_STUDIO_KEY != null }}
        run: |
          set -xeu
          log="pvs-analysis.log"
          general_criteria="GA:1,2,3;64:1,2,3;OP:1,2,3"
          stamp="$(date +'%Y-%m-%d_T%H%M')-${GITHUB_SHA:0:8}"
          reportdir="pvs-report/pvs-report-${stamp}"
          disable_warnings="V1032,V1042,V597,V809,V802,V1086"
          mkdir -p "${reportdir}"
          pvs-studio-analyzer analyze \
            --ignore-ccache           \
            -a "GA;OP;CS"             \
            -s .pvs-suppress          \
            -j "$(nproc)"             \
            -o "${log}"
          plog-converter              \
            -p aircrack-ng            \
            -v "${GITHUB_SHA:0:8}"    \
            -a "${general_criteria}"  \
            -d "${disable_warnings}"  \
            -t fullhtml               \
            -o "${reportdir}/fullhtml"\
            "${log}"
          mv "${reportdir}/fullhtml" "${reportdir}/general"
          plog-converter              \
            -a "${general_criteria}"  \
            -d "${disable_warnings}"  \
            -t csv                    \
            -o pvs-report.csv         \
            "${log}"
          cp -l pvs-report.csv "${reportdir}/general/"
          pvs-studio-analyzer suppress                      \
            -a "${general_criteria}"                        \
            -o "${reportdir}/general/supressible-list.json" \
            "${log}"
          cat pvs-report.csv || echo

      - name: Upload report
        env:
          PVS_STUDIO_NAME: ${{ secrets.PvsStudioName }}
          PVS_STUDIO_KEY: ${{ secrets.PvsStudioKey }}
        if: ${{ env.ACT != 'true' && env.PVS_STUDIO_NAME != null && env.PVS_STUDIO_KEY != null }}
        uses: actions/upload-artifact@v4
        with:
          name: pvs-analysis-report
          path: pvs-report

      - name: Summarize report
        env:
          MAX_BUGS: 0
          PVS_STUDIO_NAME: ${{ secrets.PvsStudioName }}
          PVS_STUDIO_KEY: ${{ secrets.PvsStudioKey }}
        if: ${{ env.PVS_STUDIO_NAME != null && env.PVS_STUDIO_KEY != null }}
        run: |
          ./build/count-pvs-bugs.py pvs-report.csv "${MAX_BUGS}"
