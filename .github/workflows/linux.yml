name: Linux CI

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  push:
    branches: [ master ]
    paths-ignore:
      - apparmor/**
      - contrib/**
      - manpages/**
      - patches/**
      - '.coverityignore'
      - '.github/workflows/gentoo.yml'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/workflows/almalinux.yml'
      - '.github/workflows/alpine.yml'
      - '.github/workflows/check-actions-updates.yml'
      - '.github/workflows/check-release-ready.yml'
      - '.github/workflows/codespell.yml'
      - '.github/workflows/coverity.yml'
      - '.github/workflows/devcontainer.yml'
      - '.github/workflows/docker.yml'
      - '.github/workflows/docker-release.yml'
      - '.github/workflows/dragonflybsd.yml'
      - '.github/workflows/freebsd.yml'
      - '.github/workflows/gcc.yml'
      - '.github/workflows/irc.yml'
      - '.github/workflows/kali.yml'
      - '.github/workflows/linux-pcre.yml'
      - '.github/workflows/macos.yml'
      - '.github/workflows/manual.yml'
      - '.github/workflows/markdown-link.yml'
      - '.github/workflows/netbsd.yml'
      - '.github/workflows/openbsd.yml'
      - '.github/workflows/pvs-studio.yml'
      - '.github/workflows/scanbuild.yml'
      - '.github/workflows/style.yml'
      - '.github/workflows/windows.yml'
      - '.vscode/**'
      - '.devcontainer/**'
      - '.clang-format'
      - '.codespellrc'
      - '.editorconfig'
      - '.gitignore'
      - '.pre-commit-config.yaml'
      - 'AC_VERSION.in'
      - 'AUTHORS'
      - 'centos_autotools.sh'
      - 'ChangeLog'
      - 'docker_package_install.sh'
      - 'Dockerfile'
      - 'Dockerfile.release'
      - 'INSTALLING'
      - 'LICENSE'
      - 'LICENSE.OpenSSL'
      - 'README'
      - 'README.md'
      - 'SECURITY.md'
      - 'scripts/airmon-ng.freebsd'

  pull_request:
    branches: [ master ]
    paths-ignore:
      - apparmor/**
      - contrib/**
      - manpages/**
      - patches/**
      - '.coverityignore'
      - '.github/workflows/gentoo.yml'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/workflows/almalinux.yml'
      - '.github/workflows/alpine.yml'
      - '.github/workflows/check-actions-updates.yml'
      - '.github/workflows/check-release-ready.yml'
      - '.github/workflows/codespell.yml'
      - '.github/workflows/coverity.yml'
      - '.github/workflows/devcontainer.yml'
      - '.github/workflows/docker.yml'
      - '.github/workflows/docker-release.yml'
      - '.github/workflows/dragonflybsd.yml'
      - '.github/workflows/freebsd.yml'
      - '.github/workflows/gcc.yml'
      - '.github/workflows/irc.yml'
      - '.github/workflows/kali.yml'
      - '.github/workflows/linux-pcre.yml'
      - '.github/workflows/macos.yml'
      - '.github/workflows/manual.yml'
      - '.github/workflows/markdown-link.yml'
      - '.github/workflows/netbsd.yml'
      - '.github/workflows/openbsd.yml'
      - '.github/workflows/pvs-studio.yml'
      - '.github/workflows/scanbuild.yml'
      - '.github/workflows/style.yml'
      - '.github/workflows/windows.yml'
      - '.vscode/**'
      - '.devcontainer/**'
      - '.clang-format'
      - '.codespellrc'
      - '.editorconfig'
      - '.gitignore'
      - '.pre-commit-config.yaml'
      - 'AC_VERSION.in'
      - 'AUTHORS'
      - 'centos_autotools.sh'
      - 'ChangeLog'
      - 'docker_package_install.sh'
      - 'Dockerfile'
      - 'Dockerfile.release'
      - 'INSTALLING'
      - 'LICENSE'
      - 'LICENSE.OpenSSL'
      - 'README'
      - 'README.md'
      - 'SECURITY.md'
      - 'scripts/airmon-ng.freebsd'

env:
  LANG: en_US.UTF-8
  TZ: UTC

jobs:
  ubuntu_22_04:
    runs-on: ubuntu-22.04

    strategy:
      fail-fast: false
      matrix:
        compiler:
          - cc:  gcc-13
            cxx: g++-13
          - cc:  gcc-12
            cxx: g++-12
          - cc:  gcc-11
            cxx: g++-11
          - cc:  gcc-10
            cxx: g++-10
          - cc:  gcc-9
            cxx: g++-9
          - cc:  clang-11
            cxx: clang++-11
          - cc:  clang-12
            cxx: clang++-12
          - cc:  clang-13
            cxx: clang++-13
          - cc:  clang-14
            cxx: clang++-14
          - cc:  clang-15
            cxx: clang++-15
          - cc:  clang-16
            cxx: clang++-16
          - cc:  clang-17
            cxx: clang++-17
          - cc:  clang-18
            cxx: clang++-18
          - cc:  clang-19
            cxx: clang++-19
        flags:
          - name: Gcrypt
            flags: "--with-gcrypt"
          - name: OpenSSL
            flags: ""

    name: Ubuntu 22.04 ${{ matrix.compiler.cc }} using ${{ matrix.flags.name }}

    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 750
          submodules: 'recursive'

      - uses: actions/cache@v4
        id: cache
        if: ${{ env.ACT != 'true' }}
        with:
          path: |
            /home/runner/.ccache
          key: ${{ runner.os }}-${{ matrix.compiler.cc }}-${{ matrix.flags.name }}-${{ hashFiles('.github/workflows/linux.yml') }}
          restore-keys: ${{ runner.os }}-${{ matrix.compiler.cc }}-${{ matrix.flags.name }}

      - name: Install dependencies
        run: |
          SUDO="$([ "$ACT" = "true" ] || echo sudo)"
          $SUDO apt update -q

          export COMPILER_NAME=$(echo ${{ matrix.compiler.cc }} | awk -F- '{print $1}')
          export COMPILER_VERSION=$(echo ${{ matrix.compiler.cc }} | awk -F- '{print $2}')

          if [ ${COMPILER_NAME} = 'gcc' ] && [ ${COMPILER_VERSION} -ge 13 ]; then
            $SUDO apt-get install software-properties-common -y
            $SUDO add-apt-repository ppa:ubuntu-toolchain-r/test -y
          fi

          if [ ${COMPILER_NAME} = 'clang' ] && [ ${COMPILER_VERSION} -ge 16 ]; then
            $SUDO apt-get install lsb-release wget software-properties-common gnupg -y
            wget -nv https://apt.llvm.org/llvm.sh
            chmod +x llvm.sh
            $SUDO ./llvm.sh ${COMPILER_VERSION}
          fi
          if [ -z "$(command -v ${{ matrix.compiler.cc }})" ]; then
            [ "${COMPILER_NAME}" = 'gcc' ] && $SUDO apt-get install -y ${{ matrix.compiler.cc }} ${{ matrix.compiler.cxx }}
            [ "${COMPILER_NAME}" = 'clang' ] && $SUDO apt-get install -y ${{ matrix.compiler.cc }}
          fi

          $SUDO apt-get install -y git autoconf automake build-essential ccache ethtool expect hostapd iw lcov libcmocka-dev libgcrypt20-dev libhwloc-dev libnl-3-dev libnl-genl-3-dev libpcap-dev libpcre2-dev libsqlite3-dev libssl-dev libtool pkg-config rfkill screen shtool tcpdump usbutils wpasupplicant zlib1g-dev

      - name: Ccache stats before builds
        run: |
          ccache -s

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: cpp

      - name: Build with ${{ matrix.compiler.cc }} using ${{ matrix.flags.name }}
        env:
          AM_COLOR_TESTS: always
        run: |
          CPUS=$(nproc)
          case "${{ matrix.compiler.cc }}" in
            clang*)
              CC=${{ matrix.compiler.cc }}
              CXX=${{ matrix.compiler.cxx }}
              export CFLAGS="-Werror -Wno-zero-length-array -Wno-deprecated-declarations"
              export CXXFLAGS="-Werror -Wno-zero-length-array -Wno-deprecated-declarations"
              ;;
            *)
              CC=${{ matrix.compiler.cc }}
              CXX=${{ matrix.compiler.cxx }}
              export CFLAGS="-Werror -Wno-unused-result -Wno-deprecated-declarations"
              export CXXFLAGS="-Werror -Wno-unused-result -Wno-deprecated-declarations"
              ;;
          esac
          export CC="ccache $CC"
          export CXX="ccache $CXX"
          echo "::group::make distclean"
          make distclean || :
          echo "::endgroup::"
          echo "::group::autoreconf"
          autoreconf -vif
          echo "::endgroup::"
          echo "::group::configure"
          mkdir linux-${{ matrix.compiler.cc }}-${{ matrix.flags.name }}
          cd linux-${{ matrix.compiler.cc }}-${{ matrix.flags.name }}
          echo ">> Configure with $CC, $CXX, and ${{ matrix.flags.flags }}"
          ../configure --without-opt --with-experimental --enable-maintainer-mode ${{ matrix.flags.flags }} || { cat config.log; exit 1; }
          echo "::endgroup::"
          echo "::group::build"
          echo ">> Build using ${CPUS} jobs"
          make -j ${CPUS}
          echo "::endgroup::"
          echo "::group::run tests"
          make -j ${CPUS} check || { find . -name 'test-suite.log' -exec cat {} ';' && exit 1; }
          echo "::endgroup::"
          cd ..

      - name: Ccache stats after builds
        run: |
          ccache -s

      - name: Archive artifacts
        if: ${{ env.ACT != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: linux-ubuntu-22.04-${{ matrix.compiler.cc }}-${{ matrix.flags.name }}
          path: |
            linux-${{ matrix.compiler.cc }}-${{ matrix.flags.name }}
            !linux-${{ matrix.compiler.cc }}-${{ matrix.flags.name }}/**/.deps
            !linux-${{ matrix.compiler.cc }}-${{ matrix.flags.name }}/**/.dirstamp
            !linux-${{ matrix.compiler.cc }}-${{ matrix.flags.name }}/**/*.a
            !linux-${{ matrix.compiler.cc }}-${{ matrix.flags.name }}/**/*.la
            !linux-${{ matrix.compiler.cc }}-${{ matrix.flags.name }}/**/*.lai
            !linux-${{ matrix.compiler.cc }}-${{ matrix.flags.name }}/**/*.o
            !linux-${{ matrix.compiler.cc }}-${{ matrix.flags.name }}/**/*.lo
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  ubuntu_20_04:
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix:
        # gcc: 9.3.0, 10.2.0
        # clang: 10.0.0, 11.0.0, 12.0.1
        compiler:
          - cc:  gcc-10
            cxx: g++-10
          - cc:  gcc-9
            cxx: g++-9
          - cc:  clang-12
            cxx: clang++-12
          - cc:  clang-11
            cxx: clang++-11
          - cc:  clang-10
            cxx: clang++-10
        flags:
          - name: Gcrypt
            flags: "--with-gcrypt"
          - name: OpenSSL
            flags: ""

    name: Ubuntu 20.04 ${{ matrix.compiler.cc }} using ${{ matrix.flags.name }}

    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 750
          submodules: 'recursive'

      - uses: actions/cache@v4
        id: cache
        if: ${{ env.ACT != 'true' }}
        with:
          path: |
            /home/runner/.ccache
          key: ${{ runner.os }}-${{ matrix.compiler.cc }}-${{ matrix.flags.name }}-${{ hashFiles('.github/workflows/linux.yml') }}
          restore-keys: ${{ runner.os }}-${{ matrix.compiler.cc }}-${{ matrix.flags.name }}

      - name: Install dependencies
        run: |
          sudo apt update -q
          sudo apt-get install -y autoconf automake build-essential ccache ethtool expect hostapd iw lcov libcmocka-dev libgcrypt20-dev libhwloc-dev libnl-3-dev libnl-genl-3-dev libpcap-dev libpcre2-dev libsqlite3-dev libssl-dev libtool pkg-config rfkill screen shtool tcpdump usbutils wpasupplicant zlib1g-dev

      - name: Ccache stats before builds
        run: |
          ccache -s

      - name: Build with ${{ matrix.compiler.cc }} using ${{ matrix.flags.name }}
        env:
          AM_COLOR_TESTS: always
        run: |
          CPUS=$(nproc)
          export CC="ccache ${{ matrix.compiler.cc }}"
          export CXX="ccache ${{ matrix.compiler.cxx }}"
          echo "::group::make distclean"
          make distclean || :
          echo "::endgroup::"
          echo "::group::autoreconf"
          autoreconf -vif
          echo "::endgroup::"
          echo "::group::configure"
          mkdir linux-${{ matrix.compiler.cc }}-${{ matrix.flags.name }}
          cd linux-${{ matrix.compiler.cc }}-${{ matrix.flags.name }}
          echo ">> Configure with $CC, $CXX, and ${{ matrix.flags.flags }}"
          ../configure --without-opt --with-experimental --enable-maintainer-mode ${{ matrix.flags.flags }} || { cat config.log; exit 1; }
          echo "::endgroup::"
          echo "::group::build"
          echo ">> Build using ${CPUS} jobs"
          make -j ${CPUS}
          echo "::endgroup::"
          echo "::group::run tests"
          make -j ${CPUS} check || { find . -name 'test-suite.log' -exec cat {} ';' && exit 1; }
          echo "::endgroup::"
          cd ..

      - name: Ccache stats after builds
        run: |
          ccache -s

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        if: ${{ env.ACT != 'true' }}
        with:
          name: linux-ubuntu-20.04-${{ matrix.compiler.cc }}-${{ matrix.flags.name }}
          path: |
            linux-${{ matrix.compiler.cc }}-${{ matrix.flags.name }}
            !linux-${{ matrix.compiler.cc }}-${{ matrix.flags.name }}/**/.deps
            !linux-${{ matrix.compiler.cc }}-${{ matrix.flags.name }}/**/.dirstamp
            !linux-${{ matrix.compiler.cc }}-${{ matrix.flags.name }}/**/*.a
            !linux-${{ matrix.compiler.cc }}-${{ matrix.flags.name }}/**/*.la
            !linux-${{ matrix.compiler.cc }}-${{ matrix.flags.name }}/**/*.lai
            !linux-${{ matrix.compiler.cc }}-${{ matrix.flags.name }}/**/*.o
            !linux-${{ matrix.compiler.cc }}-${{ matrix.flags.name }}/**/*.lo
